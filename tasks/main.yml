- name: Gather physical host facts
  setup:
    gather_subset: "network,virtual"
  delegate_to: "{{ physical_host }}"
  delegate_facts: true
  run_once: true

- name: Generate variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - files:
      - "{{ hostvars[physical_host]['ansible_distribution'] | lower }}-{{ hostvars[physical_host]['ansible_distribution_version'] | lower }}.yml"
      - "{{ hostvars[physical_host]['ansible_distribution'] | lower }}-{{ hostvars[physical_host]['ansible_distribution_major_version'] | lower }}.yml"
      - "{{ hostvars[physical_host]['ansible_os_family'] | lower }}-{{ hostvars[physical_host]['ansible_distribution_major_version'] | lower }}.yml"
      - "{{ hostvars[physical_host]['ansible_distribution'] | lower }}.yml"
      - "{{ hostvars[physical_host]['ansible_os_family'] | lower }}.yml"
      skip: true
  tags:
    - always

- name: "prepare physical host"
  include: "prepare_physical_host.yml"
  when: prepare_physical_host == true

- name: Escape quote container name
  command: "systemd-escape {{ inventory_hostname }}"
  changed_when: false
  register: systemd_escape
  delegate_to: "{{ physical_host }}"
  tags:
    - skip_ansible_lint
    - always

- name: Get container status
  command: machinectl status "{{ inventory_hostname }}"
  register: machinectl_container_status
  failed_when: false
  changed_when: false
  delegate_to: "{{ physical_host }}"

- name: Get container image status
  command: machinectl image-status "{{ inventory_hostname }}"
  register: machinectl_container_image_status
  failed_when: false
  changed_when: false
  delegate_to: "{{ physical_host }}"

- name: Get base image status
  command: machinectl image-status "{{ base_image }}"
  register: machinectl_base_image_status
  failed_when: false
  changed_when: false
  delegate_to: "{{ physical_host }}"

- name: "create base image"
  include: "create_base_image.yml"
  when:
    - machinectl_base_image_status.rc != 0
    - create_base_image == true

- name: Fail if base image does not exist
  fail:
    msg: >
      The base container image "{{ base_image }}" does not exist and
      'create_base_image' is set to false. Cannot create container
  when:
    - create_base_image == false
    - machinectl_base_image_status.rc != 0

- name: Locate nspawn config
  stat:
    path: "/etc/systemd/nspawn/{{ inventory_hostname }}.nspawn"
  register: nspawn_config
  changed_when: false
  delegate_to: "{{ physical_host }}"

- name: Create nspawn directory
  file:
    path: "/etc/systemd/nspawn"
    state: "directory"
  delegate_to: "{{ physical_host }}"
  when:
    - not nspawn_config.stat.exists

- name: Create dropin config directory
  file:
    path: "/etc/systemd/{{ inventory_hostname }}.service.d"
    state: "directory"
  when: use_existing_netns is defined
  delegate_to: "{{ physical_host }}"

- name: Copy container config
  template:
    src: templates/container_config.nspawn.j2
    dest: "/etc/systemd/nspawn/{{ inventory_hostname }}.nspawn"
    owner: "root"
    group: "root"
    mode: "0644"
  register: container_config_new
  delegate_to: "{{ physical_host }}"
  when: not nspawn_config.stat.exists | bool

- name: Copy container service dropin config
  template:
    src: templates/systemd-netnamespace-dropin.conf.j2
    dest: "/etc/systemd/system/{{ inventory_hostname }}.service.d/use_existing_netns.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  delegate_to: "{{ physical_host }}"
  when: use_existing_netns is defined

- name: Clone the base container image
  command: machinectl clone "{{ base_image }}" "{{ inventory_hostname }}"
  register: machinectl_container_clone
  retries: 3
  delay: 2
  until: machinectl_container_clone is success
  delegate_to: "{{ physical_host }}"
  tags:
    - skip_ansible_lint
  when:
    - machinectl_container_image_status.rc != 0

- name: Create Container directories
  file:
    path: "{{ item }}"
    state: "directory"
  with_items:
    - "/var/lib/machines/{{ inventory_hostname }}/var/log/journal"
    - "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/network"
    - "/var/lib/machines/{{ inventory_hostname }}/var/lib/dbus"
  delegate_to: "{{ physical_host }}"
  when:
    - machinectl_container_image_status.rc == 0

- name: Container RO bind path cleanup
  file:
    path: "/var/lib/machines/{{ inventory_hostname }}/{{ item.container_path | default(item.host_path) }}"
    state: "absent"
  with_items: "{{ container_default_ro_bind_mounts | union(container_ro_bind_mounts | default([])) }}"
  delegate_to: "{{ physical_host }}"
  when:
    - machinectl_container_status.rc != 0

- name: Create Container inner directories
  file:
    path: "/var/lib/machines/{{ inventory_hostname }}/{{ item.container_path | default(item.host_path) }}"
    state: "directory"
  with_items: "{{ container_default_bind_mounts | union(container_bind_mounts | default([])) }}"
  delegate_to: "{{ physical_host }}"

- name: Container outer service directories
  file:
    path: "{{ item.host_path }}"
    state: "directory"
  with_items: "{{ container_default_bind_mounts | union(container_bind_mounts | default([])) }}"
  delegate_to: "{{ physical_host }}"

- name: Generate machine-id
  command: "systemd-machine-id-setup --root=/var/lib/machines/{{ inventory_hostname }}"
  args:
    creates: "/var/lib/machines/{{ inventory_hostname }}/etc/machine-id"
  register: machineid_set
  retries: 3
  delay: 2
  until: machineid_set is success
  delegate_to: "{{ physical_host }}"
  tags:
    - skip_ansible_lint

- name: Create dbus machine-id
  copy:
    src: "/var/lib/machines/{{ inventory_hostname }}/etc/machine-id"
    dest: "/var/lib/machines/{{ inventory_hostname }}/var/lib/dbus/machine-id"
    mode: "0444"
    remote_src: "yes"
  remote_user: root
  delegate_to: "{{ physical_host }}"

### network / DNS config
# may move to extra file
- name: Create systemd-network default config
  template:
    src: templates/systemd-networkd_default.network.j2
    dest: "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/network/default.network"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: reload systemd-networkd
  delegate_to: "{{ physical_host }}"
  # when: not host_netns

- name: "copy nspawn network configs"
  copy: src={{ item.src }} dest={{ item.dest }} remote_src=yes
  with_items:
    - { src: '/var/lib/machines/{{ inventory_hostname }}/lib/systemd/network/80-container-host0.network', dest: '/var/lib/machines/{{ inventory_hostname }}/etc/systemd/network/80-container-host0.network' }
    - { src: '/lib/systemd/network/80-container-ve.network', dest: '/etc/systemd/network/80-container-ve.network' }
  when:
    - enable_linklocal == false
  delegate_to: "{{ physical_host }}"

- name: disable Linklocal IPs for container
  lineinfile:
    path: /var/lib/machines/{{ inventory_hostname }}/etc/systemd/network/80-container-host0.network
    regexp: 'LinkLocalAddressing='
    line: 'LinkLocalAddressing=ipv6'
  when:
    - enable_linklocal == false
  delegate_to: "{{ physical_host }}"

- name: disable Linklocal IPs for host
  lineinfile:
    path: /etc/systemd/network/80-container-ve.network
    regexp: 'LinkLocalAddressing='
    line: 'LinkLocalAddressing=ipv6'
  when:
    - enable_linklocal == false
  delegate_to: "{{ physical_host }}"

- name: Create resolved link
  file:
    src: "/var/run/systemd/resolve/resolv.conf"
    dest: "/var/lib/machines/{{ inventory_hostname }}/etc/resolv.conf"
    force: true
    follow: false
    state: link
  notify: restart systemd-resolved
  delegate_to: "{{ physical_host }}"
  when:
    - nspawn_container_enable_resolved | bool

- name: Add DNS default server
  lineinfile:
    path: "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/resolved.conf"
    regexp: '^.*DNS=$'
    insertafter: '[Resolve]'
    line: "DNS={{ dns_servers | default('9.9.9.9 2620:fe::fe') }}"
  #notify: restart systemd-resolved
  delegate_to: "{{ physical_host }}"
  when:
    - dns_servers is defined

- name: Enable LLMNR
  lineinfile:
    path: "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/resolved.conf"
    regexp: '^.*LLNMR=$'
    insertafter: '[Resolve]'
    line: "LLMNR=yes"
  notify: restart systemd-resolved
  delegate_to: "{{ physical_host }}"
  when: enable_llmnr == true

- name: Create avahi config in container
  template:
    src: templates/avahi-daemon.conf.j2
    dest: "/var/lib/machines/{{ inventory_hostname }}/etc/avahi/avahi-daemon.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: restart avahi-daemon ## this happens on the host
  register: container_avahi_config
  delegate_to: "{{ physical_host }}"
  when: enable_avahi == true
  # TODO: enable avahi

- name: Disable avahi config in container
  file:
    path: "{{ item }}"
    state: absent
  delegate_to: "{{ physical_host }}"
  when: enable_avahi == false
  with_items:
    - "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/system/multi-user.target.wants/avahi-daemon.service"
    - "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/system/avahi-daemon.service"
    - "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/system/sockets.target.wants/avahi-daemon.socket"
    - "/var/lib/machines/{{ inventory_hostname }}/etc/systemd/system/avahi-daemon.socket"

- name: "config SSH inside the container"
  include: "ssh_config.yml"
  when: enable_ssh == true
  tags: ssh

- name: Start new container (enable)
  systemd:
    daemon_reload: yes
    name: "systemd-nspawn@{{ inventory_hostname }}"
    state: "{{ ((machinectl_container_clone is changed or container_config_new is changed) | default(false)) | ternary('restarted', 'started') }}"
    enabled: true
  register: machinectl_start
  retries: 5
  delay: 2
  until: machinectl_start is success
  delegate_to: "{{ physical_host }}"

- name: Generate hostname
  command: >-
    hostnamectl --machine="{{ inventory_hostname }}" {{ item }} --pretty --static --transient
  with_items:
    - "set-hostname {{ inventory_hostname | replace('_', '-') }}.{{ physical_host }}.{{ container_domain }}"
    - "set-location {{ physical_host }}"
    - "set-chassis container"
    - "set-deployment {{ container_domain }}"
    - "set-icon-name container"
  register: hostnamectl_set
  retries: 3
  delay: 2
  until: hostnamectl_set is success
  delegate_to: "{{ physical_host }}"

# This point the container is running. Delegation should no longer be required.
# ==============================================================================

- name: Force all notified handlers now
  # todo: check if handlers are executed correctly inside container
  meta: flush_handlers

- name: (RE)Gather facts post setup
  setup:
    #gather_subset: "network,hardware,virtual"

- name: Install NSS resolve lib
  package:
    name: "{{ libnss_resolve_pkg | default('libnss-resolve') }}"
    state: present
  notify: restart systemd-resolved
  when:
    - nspawn_container_enable_resolved | bool

- name: Install NSS mdns lib
  package:
    name: "{{ libnss_mdns_pkg | default('libnss-mdns') }}"
    state: present
  when:
    - enable_avahi | bool
